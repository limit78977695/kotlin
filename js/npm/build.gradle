plugins {
    id "com.moowork.node" version "1.2.0"
}

apply plugin: 'base'

description = 'Node utils'

node {
    download = true
}

ext {
  deployDir = "${buildDir}/deploy_to_npm"
  templateDir = "${projectDir}/templates"
  kotlincDir = "${projectDir}/../../dist/kotlinc"
  deployVersion = System.getProperty('kotlin.deploy.version', '0.0.0')
  deployTag = System.getProperty('kotlin.deploy.tag', 'dev')
  authToken = System.getProperty('kotlin.npmjs.auth.token')
}

def createCopyTemplateTask(def templateName) {
  return tasks.create("copy-${templateName}-template", Copy) {
    from "${templateDir}/${templateName}"
    into "${deployDir}/${templateName}"
    
    expand(version: "${deployVersion}")
  }
}

def createCopyLibraryFilesTask(def libraryName, def fromJar) {
  return tasks.create("copy-${libraryName}-library", Copy) {
    from zipTree(fromJar).matching {
      include "${libraryName}.js"
      include "${libraryName}.meta.js"
      include "${libraryName}.js.map"
      include "${libraryName}/**"
    }

    into "${deployDir}/${libraryName}"
  }
} 

def createPublishToNpmTask(def templateName) {
  return tasks.create("publish-${templateName}-to-npm", NpmTask) {
    workingDir = file("${deployDir}/${templateName}")
    args = ['publish', '--//registry.npmjs.org/:_authToken=${authToken}=$kotlin.npmjs.auth.token', '--tag=${deployTag}']
  }
}

def sequential(def tasks) {
  def task = null
  tasks.each {
    if (task != null) it.dependsOn task
    task = it
  }
  return task
}

def publishKotlinJs = sequential([
  createCopyTemplateTask('kotlin'),
  createCopyLibraryFilesTask('kotlin', "${kotlincDir}/lib/kotlin-stdlib-js.jar"),
  createPublishToNpmTask('kotlin')
])

def publishKotlinCompiler = sequential([
  createCopyTemplateTask('kotlin-compiler'),
  tasks.create('copy-kotlin-compiler', Copy) {
    from "${kotlincDir}"
    into "${deployDir}/kotlin-compiler"
  },
  tasks.create('chmod-kotlinc-bin', Exec) {
    commandLine 'chmod', '-R', 'ugo+rx', "${deployDir}/kotlin-compiler/bin"
  },
  createPublishToNpmTask('kotlin-compiler')
])

def publishKotlinTest = sequential([
  createCopyTemplateTask('kotlin-test'),
  createCopyLibraryFilesTask('kotlin-test', "${kotlincDir}/lib/kotlin-test-js.jar"),
  createPublishToNpmTask('kotlin-test')
])

task publishAll(dependsOn : [publishKotlinJs, publishKotlinTest, publishKotlinCompiler])
